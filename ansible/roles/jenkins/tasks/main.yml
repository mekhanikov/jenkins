- name: Directories are present
  file:
    path="{{ item }}"
    state=directory
    mode=0777
  with_items: "{{ directories }}"
  tags: [jenkins]

- name: Config files are present
  copy:
    src='{{ item }}'
    dest='{{ jenkins_directory }}/{{ item }}'
    mode=0777
  with_items: "{{ configs }}"
  tags: [jenkins]

#- name: Plugins are present
#  copy:
#    src='{{ item }}'
#    dest='{{ jenkins_directory }}/plugins/{{ item }}'
#    mode=0777
#  with_items: "{{ plugins }}"
#  tags: [jenkins]



#- name: Wait for Jenkins to start up
#  uri:
#    url: http://localhost:8080
#    status_code: 200
#    timeout: 5
#  register: jenkins_service_status
#  # Keep trying for 5 mins in 5 sec intervals
#  retries: 60
#  delay: 5
#  until: >
#     'status' in jenkins_service_status and
#     jenkins_service_status['status'] == 200

- name: Install plugins without a specific version
  jenkins_plugin:
    name: "{{ item.key }}"
    jenkins_home: /data/jenkins
    owner: ev
    group: ev
  register: my_jenkins_plugin_unversioned
  when: >
    'version' not in item.value
  with_dict: "{{ my_jenkins_plugins }}"

- name: Install plugins with a specific version
  jenkins_plugin:
    name: "{{ item.key }}"
    version: "{{ item.value['version'] }}"
    jenkins_home: /data/jenkins
    owner: ev
    group: ev
  register: my_jenkins_plugin_versioned
  when: >
    'version' in item.value
  with_dict: "{{ my_jenkins_plugins }}"

- name: Initiate the fact
  set_fact:
    jenkins_restart_required: no

- name: Check if restart is required by any of the versioned plugins
  set_fact:
    jenkins_restart_required: yes
  when: item.changed
  with_items: "{{ my_jenkins_plugin_versioned.results }}"

- name: Check if restart is required by any of the unversioned plugins
  set_fact:
    jenkins_restart_required: yes
  when: item.changed
  with_items: "{{ my_jenkins_plugin_unversioned.results }}"

#- name: Restart Jenkins if required
#  service:
#    name: jenkins
#    state: restarted
#  when: jenkins_restart_required
#
#- name: Wait for Jenkins to start up
#  uri:
#    url: http://localhost:8080
#    status_code: 200
#    timeout: 5
#  register: jenkins_service_status
#  # Keep trying for 5 mins in 5 sec intervals
#  retries: 60
#  delay: 5
#  until: >
#     'status' in jenkins_service_status and
#     jenkins_service_status['status'] == 200
#  when: jenkins_restart_required
#
#- name: Reset the fact
#  set_fact:
#    jenkins_restart_required: no
#  when: jenkins_restart_required
#
#- name: Plugin pinning
#  jenkins_plugin:
#    name: "{{ item.key }}"
#    state: "{{ 'pinned' if item.value['pinned'] else 'unpinned'}}"
#  when: >
#    'pinned' in item.value
#  with_dict: "{{ my_jenkins_plugins }}"
#
#- name: Plugin enabling
#  jenkins_plugin:
#    name: "{{ item.key }}"
#    state: "{{ 'enabled' if item.value['enabled'] else 'disabled'}}"
#  when: >
#    'enabled' in item.value
#  with_dict: "{{ my_jenkins_plugins }}"

- name: Build job directories are present
  file:
    path='{{ jenkins_directory }}/jobs/{{ item }}'
    state=directory
    mode=0777
  with_items: "{{ jobs }}"
  tags: [jenkins]

- name: Build jobs are present
  template:
    src=build.xml.j2
    dest='{{ jenkins_directory }}/jobs/{{ item }}/config.xml'
    mode=0777
    backup=yes
  with_items: "{{ jobs }}"
  tags: [jenkins]

- name: Deployment job directories are present
  file:
    path='{{ jenkins_directory }}/jobs/{{ item }}-deployment'
    state=directory
    mode=0777
  with_items: "{{ jobs }}"
  tags: [jenkins]

- name: Deployment jobs are present
  template:
    src=deployment.xml.j2
    dest='{{ jenkins_directory }}/jobs/{{ item }}-deployment/config.xml'
    backup=yes
    mode=0777
  with_items: "{{ jobs }}"
  tags: [jenkins]



- name: Container is running
  docker_container:
    name: jenkins
    image: jenkins
    ports: 8080:8080
    volumes: /data/jenkins:/var/jenkins_home
    state: started
    restart: yes
  tags: [jenkins]